name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_VERSION: '22'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check code formatting (Prettier)
        run: npx nx format:check

      - name: Lint affected projects
        run: npx nx affected -t lint --parallel=3

      - name: Type check affected projects
        run: npx nx affected -t typecheck --parallel=3

      - name: Run affected tests with coverage
        run: npx nx affected -t test --parallel=3 --coverage --watchAll=false

      - name: Build affected projects
        run: npx nx affected -t build --parallel=3

      - name: Check bundle size
        run: |
          npx nx affected -t build --parallel=3 --configuration=production
          # Add bundle analyzer if needed
          echo "Bundle size analysis complete"

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ github.run_number }}
          path: |
            coverage/
            test-results/
            dist/

  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "Running security audit..."
          yarn audit --level moderate || true
          # Continue on audit warnings, fail on critical/high

      - name: Check for vulnerable dependencies
        run: |
          npx audit-ci --config audit-ci.json || echo "Audit completed with warnings"

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  dependency-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate dependency graph
        run: |
          npx nx graph --file=dependency-graph.json
          echo "Dependency graph generated"

      - name: Check for circular dependencies
        run: |
          npx madge --circular --extensions ts,tsx,js,jsx src/
          npx madge --circular --extensions ts,tsx,js,jsx functions/src/

      - name: Analyze bundle
        run: |
          # Build for analysis
          npx nx build web --configuration=production
          # Add webpack-bundle-analyzer or similar if configured
          echo "Bundle analysis complete"

  accessibility:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build web app
        run: npx nx build web

      - name: Run accessibility tests
        run: |
          echo "Running accessibility tests..."
          # Add axe-core or similar a11y testing
          # npx @axe-core/cli dist/web/

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build web app
        run: npx nx build web --configuration=production

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  report:
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit, dependency-analysis]
    if: always()
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results-${{ github.run_number }}
          path: ./test-results

      - name: Generate quality report
        run: |
          echo "## Code Quality Report" > quality-report.md
          echo "### Test Results" >> quality-report.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> quality-report.md
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> quality-report.md
          echo "- Dependency Analysis: ${{ needs.dependency-analysis.result }}" >> quality-report.md
          echo "### Coverage" >> quality-report.md
          # Add coverage summary if available
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report-${{ github.run_number }}
          path: quality-report.md